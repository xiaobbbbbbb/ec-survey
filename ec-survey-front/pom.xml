<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.ecarinfo.survey</groupId>
		<artifactId>ec-survey</artifactId>
		<version>0.0.1</version>
	</parent>
	<groupId>com.ecarinfo.survey.front</groupId>
	<artifactId>ec-survey-front</artifactId>
	<version>0.0.1</version>
	<packaging>war</packaging>
	<name>ec-survey-front</name>

	<!-- 解决m2e插件maven-dependency-plugin问题 http://blog.csdn.net/smst1987/article/details/6871495 -->
	<build>
		<!-- 指定生成jar包的名称 -->
		<finalName>Survey</finalName>
		<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
		<!-- <outputDirectory>${basedir}/bin/classes</outputDirectory> -->

		<!-- 可以配置多个源文件目录 参看:http://gaolixu.iteye.com/blog/571216 http://www.cnblogs.com/discuss/articles/1866927.html -->
		<resources>
			<resource>
				<directory>${basedir}/src/main/java</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.*</include>
				</includes>
				<!-- 过滤文件 -->
				<!-- <excludes> -->
				<!-- <exclude>**/datasource.properties</exclude> -->
				<!-- <exclude>**/log4j.properties</exclude> -->
				<!-- <exclude>**/quartz.xml</exclude> -->
				<!-- <exclude>**/redis.properties</exclude> -->
				<!-- <exclude>**/server.properties</exclude> -->
				<!-- </excludes> -->
			</resource>
		</resources>

		<!-- 解决<execution>报错的问题 http://blog.csdn.net/smst1987/article/details/6871495 -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- 生成javadoc -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-javadoc-plugin</artifactId> <version>2.7</version> <executions> <execution> 
				<id>attach-javadocs</id> <goals> <goal>jar</goal> </goals> </execution> </executions> </plugin> -->
			<!-- 编译插件用来编译你的工程源码。 默认编译器是javac，用来编译java源代码。 默认的source设置为1.5,默认的target设定为1.5。如果你想改变这些默认值，你应该设置source和target: Goals Overview(目标概述)编译器插件有两个目标。两者都已经绑定到其适当阶段。在maven生命周期内，在各自的阶段自动执行。 
				compiler:compile 绑定到阶段，主要用于编译源文件。 compiler:testCompile 绑定到测试编译阶段，用于编译测试源文件。 设置java编译器的-source和-target: 默认的source设置为1.5,默认的target设定为1.5。如果你想改变这些默认值，你应该设置source和target。(1.5表示JDK版本) -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<!-- 指定jar包默认执行的入口 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>com.ecarinfo.server.main.App</mainClass>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
						<!-- <manifest> -->
						<!-- <addClasspath>true</addClasspath> -->
						<!-- <mainClass>com.ecarinfo.main.Shutdown</mainClass> -->
						<!-- <classpathPrefix>lib/</classpathPrefix> -->
						<!-- </manifest> -->
					</archive>
				</configuration>
			</plugin>

			<!-- 打包的同时将依赖的包文件对应复制过去 复制到target/lib目录下面 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependenices</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>target/lib</outputDirectory>
							<excludeTransitive>false</excludeTransitive>
							<stripVersion>false</stripVersion><!-- 复制包后加上包的版本号码 -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 拷贝资源文件 http://maven.apache.org/plugins/maven-resources-plugin/examples/copy-resources.html -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-html</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/html</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/html</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-logs</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/logs</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/log</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-docs</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/docs</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/docs</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-resource</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/resource</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/resource</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jstl.version>1.2</jstl.version>
		<servlet-api.version>3.0.1</servlet-api.version>
		<jsp-api.version>2.1</jsp-api.version>
		<requirejs.version>2.1.5</requirejs.version>
		<jquery.version>1.9.1</jquery.version>
		<jquery-ui.version>1.9.1</jquery-ui.version>
		<bootstrap.version>2.3.2</bootstrap.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

		<!-- spring start -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>

		<!-- Expression Language (depends on spring-core) Define this if you use Spring Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context) Define this if you use Spring Transactions 
			or DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and TestNG This artifact is generally always defined with a 'test' scope for the 
			integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>

		<!-- AspectJ是一个面向切面的框架 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjlib</artifactId>
		</dependency>

		<!-- cglib是Spring、Hibernate依赖的核心包，但是cglib还算不上最底层的， 因为它是在asm包之上做了封装，以增强易用性。 据了解，Hibernate3.2已经不再依赖cglib了，而直接依赖asm。这些都不影响cglib的强大功能 -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
		</dependency>

		<!-- end spring config -->

		<!-- ASM是一套JAVA字节码生成架构。它可以动态生成二进制格式的stub类或其他代理类， 或者在类被JAVA虚拟机装入内存之前，动态修改类 -->
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-commons</artifactId>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-util</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>


		<!-- servlet 配置 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
		</dependency>

		<!-- 静态资源打包引用 webjars.org http://mvnrepository.com/artifact/org.webjars -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>requirejs</artifactId>
			<version>${requirejs.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${jquery.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery-ui</artifactId>
			<version>${jquery-ui.version}</version>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${bootstrap.version}</version>
		</dependency>


		<!-- 引用ecarinfo public lib -->
		<dependency>
			<groupId>com.ecarinfo.survey.server</groupId>
			<artifactId>ec-survey-server</artifactId>
			<version>0.0.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.ecarinfo.ralasafe</groupId>
			<artifactId>ec-ralasafe</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.belerweb</groupId>
			<artifactId>pinyin4j</artifactId>
			<version>2.5.0</version>
		</dependency>

	</dependencies>
</project>
